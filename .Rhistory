# load libraries
library(tidyverse)
library(janitor)
library(here)
# read in data
fracking <- read_csv(here("week1", "data", "registryupload_1.csv"))
View(fracking)
# check size of df
dim(fracking)
str(fracking)
View(fracking)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() #|>
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM"))
View(fracking_clean)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date))
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start))
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name))
?filter()
?str_detect()
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(str_detect(state_name, "?"))
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(str_detect(state_name, " ?"))
unique(fracking_clean$state_name)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, " ?"))
unique(fracking_clean$state_name)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?"))
unique(fracking_clean$state_name)
library(usdata)
?abbr2state()
?ifelse()
?length()
?ifelse()
?str_length()
?ifelse()
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name))
unique(fracking_clean$state_name)
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name)) |>
# correct misspelled state names
mutate(state_name = case_when(
state_name == "Colordao" ~ "Colorado",
state_name == "Loiusiana" ~ "Louisiana",
state_name == "Louisianna" ~ "Louisiana",
state_name == "Lousiana" ~ "Louisiana",
state_name == "New Mexcio" ~ "New Mexico",
state_name == "Norh Dakota" ~ "North Dakota",
state_name == "Norht Dakota" ~ "North Dakota",
state_name == "North  Dakota" ~ "North Dakota",
state_name == "North Dakata" ~ "North Dakota",
state_name == "North Dakotta" ~ "North Dakota",
state_name == "Noth Dakota" ~ "North Dakota",
state_name == "Pennslvania" ~ "Pennsylvania",
state_name == "Pennsylavania" ~ "Pennsylvania",
state_name == "Pennsylvanya" ~ "Pennsylvania",
state_name == "Penssylvania" ~ "Pennsylvania",
state_name == "Texasa" ~ "Texas",
state_name == "Texs" ~ "Texas",
state_name == "West Viginia" ~ "West Virginia",
state_name == "Wyominng" ~ "Wyoming",
TRUE ~ state_name # copy over rest of state names from as-is
))
?case_when()
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name)) |>
# correct misspelled state names
mutate(state_name = case_when(
state_name == "Colordao" ~ "Colorado",
state_name == "Loiusiana" ~ "Louisiana",
state_name == "Louisianna" ~ "Louisiana",
state_name == "Lousiana" ~ "Louisiana",
state_name == "New Mexcio" ~ "New Mexico",
state_name == "Norh Dakota" ~ "North Dakota",
state_name == "Norht Dakota" ~ "North Dakota",
state_name == "North  Dakota" ~ "North Dakota",
state_name == "North Dakata" ~ "North Dakota",
state_name == "North Dakotta" ~ "North Dakota",
state_name == "Noth Dakota" ~ "North Dakota",
state_name == "Pennslvania" ~ "Pennsylvania",
state_name == "Pennsylavania" ~ "Pennsylvania",
state_name == "Pennsylvanya" ~ "Pennsylvania",
state_name == "Penssylvania" ~ "Pennsylvania",
state_name == "Texasa" ~ "Texas",
state_name == "Texs" ~ "Texas",
state_name == "West Viginia" ~ "West Virginia",
state_name == "Wyominng" ~ "Wyoming",
TRUE ~ state_name # copy over rest of state names from as-is
)) |>
# remove US rows that do not have a true US state
filter(!state_name %in% abbr2state())
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name)) |>
# correct misspelled state names
mutate(state_name = case_when(
state_name == "Colordao" ~ "Colorado",
state_name == "Loiusiana" ~ "Louisiana",
state_name == "Louisianna" ~ "Louisiana",
state_name == "Lousiana" ~ "Louisiana",
state_name == "New Mexcio" ~ "New Mexico",
state_name == "Norh Dakota" ~ "North Dakota",
state_name == "Norht Dakota" ~ "North Dakota",
state_name == "North  Dakota" ~ "North Dakota",
state_name == "North Dakata" ~ "North Dakota",
state_name == "North Dakotta" ~ "North Dakota",
state_name == "Noth Dakota" ~ "North Dakota",
state_name == "Pennslvania" ~ "Pennsylvania",
state_name == "Pennsylavania" ~ "Pennsylvania",
state_name == "Pennsylvanya" ~ "Pennsylvania",
state_name == "Penssylvania" ~ "Pennsylvania",
state_name == "Texasa" ~ "Texas",
state_name == "Texs" ~ "Texas",
state_name == "West Viginia" ~ "West Virginia",
state_name == "Wyominng" ~ "Wyoming",
TRUE ~ state_name # copy over rest of state names from as-is
)) |>
# remove US rows that do not have a true US state
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland",
"Red River", "Roosevelt", "Rusk", "State", "Ward"))
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name)) |>
# correct misspelled state names
mutate(state_name = case_when(
state_name == "Colordao" ~ "Colorado",
state_name == "Loiusiana" ~ "Louisiana",
state_name == "Louisianna" ~ "Louisiana",
state_name == "Lousiana" ~ "Louisiana",
state_name == "New Mexcio" ~ "New Mexico",
state_name == "Norh Dakota" ~ "North Dakota",
state_name == "Norht Dakota" ~ "North Dakota",
state_name == "North  Dakota" ~ "North Dakota",
state_name == "North Dakata" ~ "North Dakota",
state_name == "North Dakotta" ~ "North Dakota",
state_name == "Noth Dakota" ~ "North Dakota",
state_name == "Pennslvania" ~ "Pennsylvania",
state_name == "Pennsylavania" ~ "Pennsylvania",
state_name == "Pennsylvanya" ~ "Pennsylvania",
state_name == "Penssylvania" ~ "Pennsylvania",
state_name == "Texasa" ~ "Texas",
state_name == "Texs" ~ "Texas",
state_name == "West Viginia" ~ "West Virginia",
state_name == "Wyominng" ~ "Wyoming",
TRUE ~ state_name # copy over rest of state names from as-is
)) |>
# remove US rows that do not have a true US state
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland",
"Red River", "Roosevelt", "Rusk", "State", "Ward")) |>
#add a column names state_abb with just state abbreviations
mutate(state_abb = state2abbr(state_name))
fracking_clean <-
fracking |>
# convert column names to snake_case
clean_names() |>
# remove "AM" from job_start_date column observations
mutate(job_start_date = str_remove(job_start_date, " AM")) |>
# convert observations to datetime objects
mutate(datetime_start = mdy_hms(job_start_date)) |>
# add a column names year that contains only the year from datetime_start
mutate(year = year(datetime_start)) |>
# keep only necessary columns
select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
# convert all observations in the state_name column to Title Case
mutate(state_name = str_to_title(state_name)) |>
# remove any rows where the state name ends in ?
filter(!str_detect(state_name, "\\?")) |>
# convert state abbreviations to full names in the state_name column
mutate(state_name = ifelse(
test = str_length(state_name) == 2,
yes = abbr2state(state_name),
no = state_name)) |>
# correct misspelled state names
mutate(state_name = case_when(
state_name == "Colordao" ~ "Colorado",
state_name == "Loiusiana" ~ "Louisiana",
state_name == "Louisianna" ~ "Louisiana",
state_name == "Lousiana" ~ "Louisiana",
state_name == "New Mexcio" ~ "New Mexico",
state_name == "Norh Dakota" ~ "North Dakota",
state_name == "Norht Dakota" ~ "North Dakota",
state_name == "North  Dakota" ~ "North Dakota",
state_name == "North Dakata" ~ "North Dakota",
state_name == "North Dakotta" ~ "North Dakota",
state_name == "Noth Dakota" ~ "North Dakota",
state_name == "Pennslvania" ~ "Pennsylvania",
state_name == "Pennsylavania" ~ "Pennsylvania",
state_name == "Pennsylvanya" ~ "Pennsylvania",
state_name == "Penssylvania" ~ "Pennsylvania",
state_name == "Texasa" ~ "Texas",
state_name == "Texs" ~ "Texas",
state_name == "West Viginia" ~ "West Virginia",
state_name == "Wyominng" ~ "Wyoming",
TRUE ~ state_name # copy over rest of state names from as-is
)) |>
# remove US rows that do not have a true US state
filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland",
"Red River", "Roosevelt", "Rusk", "State", "Ward")) |>
#add a column names state_abb with just state abbreviations
mutate(state_abb = state2abbr(state_name)) |>
# move the state_abb column after state_name column
relocate(state_abb, .after = state_name) |>
# rename 'total_base_water_volume' to 'total_base_water_volume_gal' for clarity ----
rename(total_base_water_volume_gal = total_base_water_volume) |>
# remove obs that don't have a measurement for 'total_base_water_volume_gal' (NA) ----
drop_na(total_base_water_volume_gal) |>
# reorder rows from earliest to most recent `datetime_start` value ----
arrange(datetime_start)
fracking_clean |>
filter(state_name %in% c("Texas", "Colorado", "North Dakota")) |>
filter(year == 2015) |>
group_by(state_name) |> # pipe directly into ggplot
ggplot(aes(x = state_name, y = total_base_water_volume_gal)) +
geom_jitter(width = 0.3, alpha = 0.5, color = "gray15") +
geom_violin(color = "red4", alpha = 0.3) +
scale_y_continuous(labels = scales::label_comma()) +
labs(y = "Total base water volumn (gal)") +
coord_flip() +
theme_minimal() +
theme(
axis.title.y = element_blank()
)
#..........................load packages.........................
library(tidyverse)
library(naniar)
library(palmerpenguins) # for some minimal examples
#..........................import data...........................
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")
mko_clean <- mko |>
# keep only necessary columns ----
select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>
# create datetime column (not totally necessary for our plots, but it can be helpful to know how to do this!) ----
unite(date, year, month, day, sep = "-", remove = FALSE) |>
mutate(time = chron::times(decimal_time)) |>
unite(date_time, date, time, sep = " ") |>
# coerce data types ----
mutate(date_time = as_datetime(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
year = as.factor(year),
month = as.factor(month),
day = as.numeric(day)) |>
# add month name by indexing the built-in `month.name` vector ----
mutate(month_name = month.name[month]) |>
# replace 9999s with NAs ----
naniar::replace_with_na(replace = list(Temp_bot = 9999,
Temp_top = 9999,
Temp_mid = 9999)) |>
# select/reorder desired columns ----
select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)
#..........counts & percentages of missing data by year..........
see_NAs <- mko_clean |>
group_by(year) |>
naniar::miss_var_summary() |>
filter(variable == "Temp_bot")
#...................visualize missing Temp_bot...................
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom)
#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(gghighlight)
#..........................import data...........................
lyme <- read_csv(here::here("week2", "data", "Lyme_Disease_Cases_by_State_or_Locality.csv"))
#..........................import data...........................
lyme <- read_csv(here::here("data", "Lyme_Disease_Cases_by_State_or_Locality.csv"))
usethis::edit_r_environ()
tidycensus::census_api_key("d455ab81d7520f0bcb5c869c855891408a216ca1", overwrite = FALSE, install = TRUE)
usethis::edit_r_environ()
#....................wrangle lyme disease data...................
lyme_clean <- lyme |>
rename(state = State) |>
# remove special character from State names that have it ----
mutate(state = str_replace(string = state, pattern = "\x86", replacement = "")) |>
# remove total cases row ----
filter(state != "U.S. Total") |>
# wide to long (tidy) years ----
pivot_longer(cols = 2:16, names_to = "year", values_to = "reported_cases") |>
# reorder columns ----
relocate(year, state, reported_cases) |>
# filter for years 2010 - 2020 ----
filter(year %in% c(2010:2020))
#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(gghighlight)
#..........................import data...........................
lyme <- read_csv(here::here("data", "Lyme_Disease_Cases_by_State_or_Locality.csv"))
#....................wrangle lyme disease data...................
lyme_clean <- lyme |>
rename(state = State) |>
# remove special character from State names that have it ----
mutate(state = str_replace(string = state, pattern = "\x86", replacement = "")) |>
# remove total cases row ----
filter(state != "U.S. Total") |>
# wide to long (tidy) years ----
pivot_longer(cols = 2:16, names_to = "year", values_to = "reported_cases") |>
# reorder columns ----
relocate(year, state, reported_cases) |>
# filter for years 2010 - 2020 ----
filter(year %in% c(2010:2020))
#........get pop estimates by state using tidycensus API.........
us_state_pop <- get_estimates(geography = "state",
product = "population",
state = NULL,
year = 2019) |> # request 2019 vintage for the 2010s (see documentation)
filter(variable == "POP") |>
select(state = NAME, population = value) |>
filter(state != "Puerto Rico")
lyme_pop <- left_join(lyme_clean, us_state_pop) |>
# add col with num of 100k people per state ----
mutate(pop100k = population/100000) |>
# calculate num cases per 100k people (common way of reporting disease incidence) ----
mutate(cases_per100k = reported_cases/pop100k)
