---
title: "Discussion 1"
subtitle: "Data wrangling"
author: "Marina Kochuten"
date: 2025-01-07
toc: true
---

#### Setup
```{r}
# load libraries
library(tidyverse)
library(janitor)
library(here)
library(usdata)
```

#### Import Fracking Data
```{r}
# read in data
fracking <- read_csv(here("week1", "data", "registryupload_1.csv"))
```

#### Data Exploration
```{r}
# check size of df
dim(fracking)

# check the structure
str(fracking)
```


#### Clean Fracking Data
```{r}

fracking_clean <-
  fracking |>
  
  # convert column names to snake_case
  clean_names() |>
  
  # remove "AM" from job_start_date column observations
  mutate(job_start_date = str_remove(job_start_date, " AM")) |>
  
  # convert observations to datetime objects
  mutate(datetime_start = mdy_hms(job_start_date)) |>
  
  # add a column names year that contains only the year from datetime_start
  mutate(year = year(datetime_start)) |>
  
  # keep only necessary columns
  select(datetime_start, year, state_name, well_name, total_base_water_volume) |>
  
  # convert all observations in the state_name column to Title Case
  mutate(state_name = str_to_title(state_name)) |>
  
  # remove any rows where the state name ends in ?
  filter(!str_detect(state_name, "\\?")) |>
  
  # convert state abbreviations to full names in the state_name column
  mutate(state_name = ifelse(
    test = str_length(state_name) == 2, 
    yes = abbr2state(state_name),
    no = state_name)) |>
  
  # correct misspelled state names
 mutate(state_name = case_when(
    state_name == "Colordao" ~ "Colorado",
    state_name == "Loiusiana" ~ "Louisiana",
    state_name == "Louisianna" ~ "Louisiana",
    state_name == "Lousiana" ~ "Louisiana",
    state_name == "New Mexcio" ~ "New Mexico",
    state_name == "Norh Dakota" ~ "North Dakota",
    state_name == "Norht Dakota" ~ "North Dakota",
    state_name == "North  Dakota" ~ "North Dakota",
    state_name == "North Dakata" ~ "North Dakota",
    state_name == "North Dakotta" ~ "North Dakota",
    state_name == "Noth Dakota" ~ "North Dakota",
    state_name == "Pennslvania" ~ "Pennsylvania",
    state_name == "Pennsylavania" ~ "Pennsylvania",
    state_name == "Pennsylvanya" ~ "Pennsylvania",
    state_name == "Penssylvania" ~ "Pennsylvania",
    state_name == "Texasa" ~ "Texas",
    state_name == "Texs" ~ "Texas", 
    state_name == "West Viginia" ~ "West Virginia",
    state_name == "Wyominng" ~ "Wyoming", 
    TRUE ~ state_name # copy over rest of state names from as-is
 )) |>
  
  # remove US rows that do not have a true US state
  filter(!state_name %in% c("Beaver", "Beckham", "Harper", "Hemphill", "Midland", 
                            "Red River", "Roosevelt", "Rusk", "State", "Ward")) |>
  
  #add a column names state_abb with just state abbreviations
  mutate(state_abb = state2abbr(state_name)) |>
  
  # move the state_abb column after state_name column
  relocate(state_abb, .after = state_name) |> 
  
  # rename 'total_base_water_volume' to 'total_base_water_volume_gal' for clarity ----
  rename(total_base_water_volume_gal = total_base_water_volume) |> 

  # remove obs that don't have a measurement for 'total_base_water_volume_gal' (NA) ----
  drop_na(total_base_water_volume_gal) |> 
  
  # reorder rows from earliest to most recent `datetime_start` value ----
  arrange(datetime_start)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##          some exploratory data viz + a few plot mods for practice        ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

fracking_clean |> 
  filter(state_name %in% c("Texas", "Colorado", "North Dakota")) |> 
  filter(year == 2015) |> 
  group_by(state_name) |> # pipe directly into ggplot
  ggplot(aes(x = state_name, y = total_base_water_volume_gal)) +
  geom_jitter(width = 0.3, alpha = 0.5, color = "gray15") +
  geom_violin(color = "red4", alpha = 0.3) +
  scale_y_continuous(labels = scales::label_comma()) +
  labs(y = "Total base water volumn (gal)") +
  coord_flip() +
  theme_minimal() +
  theme(
    axis.title.y = element_blank()
    ) 
  
```

